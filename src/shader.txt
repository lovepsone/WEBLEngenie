            // перенести шейдер
            /*_material.onBeforeCompile = function(shader) {

                shader.uniforms.colorArray = {value: _Colors2DArray};
                shader.uniforms.textureArray = {value: _Texture2DArray};
                shader.uniforms.normalArray = {value: _Normal2DArray};

                shader.vertexShader = `out vec2 vUv;\n${shader.vertexShader}`;

                shader.vertexShader = shader.vertexShader.replace(
                    '#include <begin_vertex>',
                    [
                        '#include <begin_vertex>',
                        'vUv = uv;',
                        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
                    ].join('\n')
                );

                shader.fragmentShader = shader.fragmentShader.replace(
                    '#include <normalmap_pars_fragment>',
                    [
                        'precision highp sampler2DArray;',
                        //'precision highp float;',
                        //'precision highp int;',
                        'in vec2 vUv;',
                        'uniform sampler2DArray colorArray;',
                        'uniform sampler2DArray textureArray;',
                        'uniform sampler2DArray normalArray;',
                        //normal scale ?

                        'vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {',

                            // Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988
                    
                        '    vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );',
                        '    vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );',
                        '    vec2 st0 = dFdx( vUv.st );',
                        '    vec2 st1 = dFdy( vUv.st );',
                    
                        '    float scale = sign( st1.t * st0.s - st0.t * st1.s );', // we do not care about the magnitude
                    
                        '    vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );',
                        '    vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );',
                        '    vec3 N = normalize( surf_norm );',
                    
                        '    mat3 tsn = mat3( S, T, N );',
                    
                        '    mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );',
                    
                        '    return normalize( tsn * mapN );',
                    
                        '}',
                    ].join('\n')
                );

                shader.fragmentShader = shader.fragmentShader.replace(
                    '#include <map_fragment>',
                    [
                        //'#include <map_fragment>',

                        'float _repeat = 5.0;',

                        'vec4 _color = texture(colorArray, vec3(vUv, 0.0));                     //getCoord(0, 5)',
                        'vec4 _texture = texture(textureArray, vec3(vUv * _repeat, 0.0));',
                        'vec4 _mix = mix(_texture, vec4(0.0, 0.0, 0.0, 0.0), _color.r);',
                        '_texture = texture(textureArray , vec3(vUv * _repeat, 1.0));',
                        '_mix = mix(_texture, _mix, _color.g);',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 2.0));',
                        '_mix = mix(_texture, _mix, _color.b);',

                        '_color = texture(colorArray, vec3(vUv, 1.0));',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 3.0));',
                        '_mix = mix(_texture, _mix, _color.r);',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 4.0));',
                        '_mix = mix(_texture, _mix, _color.g);',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 5.0));',
                        '_mix = mix(_texture, _mix, _color.b);',

                        '_color = texture(colorArray, vec3(vUv, 2.0));',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 6.0));',
                        '_mix = mix(_texture, _mix, _color.r);',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 7.0));',
                        '_mix = mix(_texture, _mix, _color.g);',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 8.0));',
                        '_mix = mix(_texture, _mix, _color.b);',

                        '_color = texture(colorArray, vec3(vUv, 3.0));',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 9.0));',
                        '_mix = mix(_texture, _mix, _color.r);',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 10.0));',
                        '_mix = mix(_texture, _mix, _color.g);',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 11.0));',
                        '_mix = mix(_texture, _mix, _color.b);',

                        '_color = texture(colorArray, vec3(vUv, 4.0));',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 12.0));',
                        '_mix = mix(_texture, _mix, _color.r);',
                        '_texture = texture(textureArray, vec3(vUv * _repeat, 13.0));',
                        '_mix = mix(_texture, _mix, _color.g);',

                        'diffuseColor *= _mix;'
                    ].join('\n')
                );

                shader.fragmentShader = shader.fragmentShader.replace(
                    '#include <normal_fragment_maps>',
                    [
                        'vec4 _mapN = texture(normalArray, vec3(vUv * _repeat, 0.0));',
                        '_color = texture(colorArray, vec3(vUv, 0.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, vec4(0.0, 0.0, 0.0, 0.0), _color.r);',
                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 1.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.g);',
                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 2.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.b);',

                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 3.0));',
                        '_color = texture(colorArray, vec3(vUv, 1.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.r);',
                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 4.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.g);',
                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 5.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.b);',

                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 6.0));',
                        '_color = texture(colorArray, vec3(vUv, 2.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.r);',
                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 7.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.g);',
                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 8.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.b);',

                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 9.0));',
                        '_color = texture(colorArray, vec3(vUv, 3.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.r);',
                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 10.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.g);',
                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 11.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.b);',

                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 12.0));',
                        '_color = texture(colorArray, vec3(vUv, 4.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.r);',
                        '_mapN = texture(normalArray, vec3(vUv * _repeat, 13.0));',
                        '_mapN.xyz = _mapN.xyz * 2.0 - 1.0;',
                        '_mix = mix(_mapN, _mix, _color.g);',

                        'normal = perturbNormal2Arb( -vViewPosition, normal, _mix.xyz);',
                    ].join('\n')
                );
                _material.userData.shader = shader;
            }*/